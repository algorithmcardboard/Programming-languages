%{
#include <iostream>
#include <stack>
#include <string.h>

using namespace std;

int yylex(); // A function that is to be generated and provided by flex,
             // which returns a next token when called repeatedly.
int yyerror(const char *p) { std::cerr << "error: " << p << std::endl; };
stack<string> tags;
bool isValid = false;
%}

%union {
    char* sval;
};


%token <sval> TAG_START TAG_END STR
%type <sval> tstart tend tag_set

%%

xml :
    | tag_set { 
                isValid && tags.size() == 0? cout << "valid" << endl : cout << "invalid " << endl;
            }

tag_set: tstart tag_set tend 
       | tstart val tend
      ;

tstart : TAG_START {
                     tags.push($1);
                    }
       ;
tend : TAG_END {
                    char* tag = $1;
                    if(strcmp(tag, tags.top().c_str()) == 0) {
                      isValid = true;
                    }
                    tags.pop();
                }
       ;

val :
    | STR
    ;

%%

int main()
{
    yyparse(); // A parsing function that will be generated by Bison.
    return 0;
}

